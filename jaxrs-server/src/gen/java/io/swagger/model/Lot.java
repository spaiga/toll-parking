/*
 * Toll Parking API
 * # API information The document aims at describing the Toll Parking API create by `Fabio SPIGA`.  Through Toll Parking API, an end user is able to search for the most convenient parking lot for its own vehicle, drive to it and park. At the moment of leaving, the API allows to compute the amount to pay and bill the end user.  ## CRUD operations All our URLs are [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects and DELETE requests will delete objects.  ## Main Resources ### Parking The central resource is the `Parking`: this resource represents an ongoing occupancy of a `Lot` from a `Car`. It is in charge of keeping the information regarding the time spent so allowing the computation of the `Bill`.  ### Lot `Lot` refers to a parking lot of any type. It is  It display of the air seat map, allowing the end user to identify the seat to be booked for free or at a charge.  ### PricingPolicy A `Pricing Policy` is the formule to compute a bill.  ### Car The `Car` resource represent any potential user of the toll parking, that is cars, motorbikes, vans and so on.     ## Limitations - The    ## Examples ``` GET /lots ``` will return all the parking lots with their details ``` GET /lots/findAvailable?facility=powerSupply20kw ``` will filter all the parking lots with status 'available' and providing for a 20kW power supply 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: spiga.fabio@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.LotCoordinates;
import javax.validation.constraints.*;

/**
 * Lot
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2019-06-24T08:37:30.304Z")
public class Lot   {
  @JsonProperty("lotId")
  private Long lotId = null;

  /**
   * Gets or Sets lotStatus
   */
  public enum LotStatusEnum {
    AVAILABLE("available"),
    
    BUSY("busy");

    private String value;

    LotStatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LotStatusEnum fromValue(String text) {
      for (LotStatusEnum b : LotStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("lotStatus")
  private LotStatusEnum lotStatus = null;

  /**
   * Gets or Sets carType
   */
  public enum CarTypeEnum {
    GASOLINE("gasoline"),
    
    ELECTRIC20KW("electric20kw"),
    
    ELECTRIC50KW("electric50kw");

    private String value;

    CarTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CarTypeEnum fromValue(String text) {
      for (CarTypeEnum b : CarTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("carType")
  private CarTypeEnum carType = null;

  @JsonProperty("pricingPolicyId")
  private Long pricingPolicyId = null;

  @JsonProperty("coordinates")
  private LotCoordinates coordinates = null;

  public Lot lotId(Long lotId) {
    this.lotId = lotId;
    return this;
  }

  /**
   * Get lotId
   * @return lotId
   **/
  @JsonProperty("lotId")
  @ApiModelProperty(value = "")
  public Long getLotId() {
    return lotId;
  }

  public void setLotId(Long lotId) {
    this.lotId = lotId;
  }

  public Lot lotStatus(LotStatusEnum lotStatus) {
    this.lotStatus = lotStatus;
    return this;
  }

  /**
   * Get lotStatus
   * @return lotStatus
   **/
  @JsonProperty("lotStatus")
  @ApiModelProperty(value = "")
  public LotStatusEnum getLotStatus() {
    return lotStatus;
  }

  public void setLotStatus(LotStatusEnum lotStatus) {
    this.lotStatus = lotStatus;
  }

  public Lot carType(CarTypeEnum carType) {
    this.carType = carType;
    return this;
  }

  /**
   * Get carType
   * @return carType
   **/
  @JsonProperty("carType")
  @ApiModelProperty(value = "")
  public CarTypeEnum getCarType() {
    return carType;
  }

  public void setCarType(CarTypeEnum carType) {
    this.carType = carType;
  }

  public Lot pricingPolicyId(Long pricingPolicyId) {
    this.pricingPolicyId = pricingPolicyId;
    return this;
  }

  /**
   * Get pricingPolicyId
   * @return pricingPolicyId
   **/
  @JsonProperty("pricingPolicyId")
  @ApiModelProperty(value = "")
  public Long getPricingPolicyId() {
    return pricingPolicyId;
  }

  public void setPricingPolicyId(Long pricingPolicyId) {
    this.pricingPolicyId = pricingPolicyId;
  }

  public Lot coordinates(LotCoordinates coordinates) {
    this.coordinates = coordinates;
    return this;
  }

  /**
   * Get coordinates
   * @return coordinates
   **/
  @JsonProperty("coordinates")
  @ApiModelProperty(value = "")
  public LotCoordinates getCoordinates() {
    return coordinates;
  }

  public void setCoordinates(LotCoordinates coordinates) {
    this.coordinates = coordinates;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lot lot = (Lot) o;
    return Objects.equals(this.lotId, lot.lotId) &&
        Objects.equals(this.lotStatus, lot.lotStatus) &&
        Objects.equals(this.carType, lot.carType) &&
        Objects.equals(this.pricingPolicyId, lot.pricingPolicyId) &&
        Objects.equals(this.coordinates, lot.coordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lotId, lotStatus, carType, pricingPolicyId, coordinates);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lot {\n");
    
    sb.append("    lotId: ").append(toIndentedString(lotId)).append("\n");
    sb.append("    lotStatus: ").append(toIndentedString(lotStatus)).append("\n");
    sb.append("    carType: ").append(toIndentedString(carType)).append("\n");
    sb.append("    pricingPolicyId: ").append(toIndentedString(pricingPolicyId)).append("\n");
    sb.append("    coordinates: ").append(toIndentedString(coordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

