/*
 * Toll Parking API
 * # API information The document aims at describing the Toll Parking API create by `Fabio SPIGA`.  Through Toll Parking API, an end user is able to search for the most convenient parking lot for its own vehicle, drive to it and park. At the moment of leaving, the API allows to compute the amount to pay and bill the end user.  ## CRUD operations All our URLs are [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects and DELETE requests will delete objects.  ## Main Resources ### Lot The central resource is the `Lot` (parking lot) used to part a `Vehicle` and in charge of billing the time spent. A `Lot` may provide some `Facility`, like power supply equipment and has its own `PricingPolicy` .  ### PricingPolicy A `Pricing Policy` is the formule to compute a bill.  ### Vehicle The `Vehicle` resource represent any potential user of the toll parking, that is cars, motorbikes, vans and so on.  ### Parking ``Seatmap`` refers to display of the air seat map, allowing the end user to identify the seat to be booked for free or at a charge.    ## Examples ``` GET /lots ``` will return all the parking lots with their details ``` GET /lots/findAvailable?facility=powerSupply20kw ``` will filter all the parking lots with status 'available' and providing for a 20kW power supply 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: spiga.fabio@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonValue;
import javax.validation.constraints.*;

import com.fasterxml.jackson.annotation.JsonCreator;

/**
 * Gets or Sets LotFacility
 */
public enum LotFacility {
  
  NONE("none"),
  
  POWERSUPPLY20KW("powerSupply20kw"),
  
  POWERSUPPLY50KW("powerSupply50kw");

  private String value;

  LotFacility(String value) {
    this.value = value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static LotFacility fromValue(String text) {
    for (LotFacility b : LotFacility.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }
}

