/*
 * Toll Parking API
 * # API information The document aims at describing the Toll Parking API create by `Fabio SPIGA`.  Through Toll Parking API, an end user is able to search for the most convenient parking lot for its own vehicle, drive to it and park. At the moment of leaving, the API allows to compute the amount to pay and bill the end user.  ## CRUD operations All our URLs are [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects and DELETE requests will delete objects.  ## Main Resources ### Parking The central resource is the `Parking`: this resource represents an ongoing occupancy of a `Lot` from a `Car`. It is in charge of keeping the information regarding the time spent so allowing the computation of the `Bill`.  ### Lot `Lot` refers to a parking lot of any type. It is  It display of the air seat map, allowing the end user to identify the seat to be booked for free or at a charge.  ### PricingPolicy A `Pricing Policy` is the formule to compute a bill.  ### Car The `Car` resource represent any potential user of the toll parking, that is cars, motorbikes, vans and so on.     ## Limitations - The    ## Examples ``` GET /lots ``` will return all the parking lots with their details ``` GET /lots/findAvailable?facility=powerSupply20kw ``` will filter all the parking lots with status 'available' and providing for a 20kW power supply 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: spiga.fabio@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.FixedThenLinearPricingPolicy;
import io.swagger.client.model.LinearPricingPolicy;
import io.swagger.client.model.PricingPolicy;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PricingPolicyApi
 */
@Ignore
public class PricingPolicyApiTest {

    private final PricingPolicyApi api = new PricingPolicyApi();

    
    /**
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     *
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addFixedThenLinearPricingPolicyTest() throws ApiException {
        FixedThenLinearPricingPolicy body = null;
        FixedThenLinearPricingPolicy response = api.addFixedThenLinearPricingPolicy(body);

        // TODO: test validations
    }
    
    /**
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     *
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addLinearPricingPolicyTest() throws ApiException {
        LinearPricingPolicy body = null;
        LinearPricingPolicy response = api.addLinearPricingPolicy(body);

        // TODO: test validations
    }
    
    /**
     * Returns a Pricing Policy by ID
     *
     * Returns a Pricing Policy by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPricingPolicyByIdTest() throws ApiException {
        Long pricingPolicyId = null;
        PricingPolicy response = api.getPricingPolicyById(pricingPolicyId);

        // TODO: test validations
    }
    
}
