/*
 * Toll Parking API
 * # API information The document aims at describing the Toll Parking API create by `Fabio SPIGA`.  Through Toll Parking API, an end user is able to search for the most convenient parking lot for its own vehicle, drive to it and park. At the moment of leaving, the API allows to compute the amount to pay and bill the end user.  ## CRUD operations All our URLs are [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects and DELETE requests will delete objects.  ## Main Resources ### Parking The central resource is the `Parking`: this resource represents an ongoing occupancy of a `Lot` from a `Car`. It is in charge of keeping the information regarding the time spent so allowing the computation of the `Bill`.  ### Lot `Lot` refers to a parking lot of any type. It is  It display of the air seat map, allowing the end user to identify the seat to be booked for free or at a charge.  ### PricingPolicy A `Pricing Policy` is the formule to compute a bill.  ### Car The `Car` resource represent any potential user of the toll parking, that is cars, motorbikes, vans and so on.     ## Limitations - The    ## Examples ``` GET /lots ``` will return all the parking lots with their details ``` GET /lots/findAvailable?facility=powerSupply20kw ``` will filter all the parking lots with status 'available' and providing for a 20kW power supply 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: spiga.fabio@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.FixedThenLinearPricingPolicy;
import io.swagger.client.model.LinearPricingPolicy;
import io.swagger.client.model.PricingPolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricingPolicyApi {
    private ApiClient apiClient;

    public PricingPolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricingPolicyApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addFixedThenLinearPricingPolicy
     * @param body New pricing policy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addFixedThenLinearPricingPolicyCall(FixedThenLinearPricingPolicy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/pricingPolicies/fixedThenlinearPricingPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addFixedThenLinearPricingPolicyValidateBeforeCall(FixedThenLinearPricingPolicy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addFixedThenLinearPricingPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = addFixedThenLinearPricingPolicyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     * @param body New pricing policy (required)
     * @return FixedThenLinearPricingPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FixedThenLinearPricingPolicy addFixedThenLinearPricingPolicy(FixedThenLinearPricingPolicy body) throws ApiException {
        ApiResponse<FixedThenLinearPricingPolicy> resp = addFixedThenLinearPricingPolicyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     * @param body New pricing policy (required)
     * @return ApiResponse&lt;FixedThenLinearPricingPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FixedThenLinearPricingPolicy> addFixedThenLinearPricingPolicyWithHttpInfo(FixedThenLinearPricingPolicy body) throws ApiException {
        com.squareup.okhttp.Call call = addFixedThenLinearPricingPolicyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<FixedThenLinearPricingPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60; (asynchronously)
     * Creates a PricingPolicy of type &#x60;FixedThenLinear&#x60;
     * @param body New pricing policy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addFixedThenLinearPricingPolicyAsync(FixedThenLinearPricingPolicy body, final ApiCallback<FixedThenLinearPricingPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addFixedThenLinearPricingPolicyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FixedThenLinearPricingPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addLinearPricingPolicy
     * @param body New pricing policy (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addLinearPricingPolicyCall(LinearPricingPolicy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/pricingPolicies/linearPricingPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addLinearPricingPolicyValidateBeforeCall(LinearPricingPolicy body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addLinearPricingPolicy(Async)");
        }
        

        com.squareup.okhttp.Call call = addLinearPricingPolicyCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     * @param body New pricing policy (required)
     * @return LinearPricingPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LinearPricingPolicy addLinearPricingPolicy(LinearPricingPolicy body) throws ApiException {
        ApiResponse<LinearPricingPolicy> resp = addLinearPricingPolicyWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     * @param body New pricing policy (required)
     * @return ApiResponse&lt;LinearPricingPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LinearPricingPolicy> addLinearPricingPolicyWithHttpInfo(LinearPricingPolicy body) throws ApiException {
        com.squareup.okhttp.Call call = addLinearPricingPolicyValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<LinearPricingPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a PricingPolicy of type &#x60;Linear&#x60; (asynchronously)
     * Creates a PricingPolicy of type &#x60;Linear&#x60;
     * @param body New pricing policy (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addLinearPricingPolicyAsync(LinearPricingPolicy body, final ApiCallback<LinearPricingPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addLinearPricingPolicyValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LinearPricingPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPricingPolicyById
     * @param pricingPolicyId ID of the Pricing Policy to fetch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPricingPolicyByIdCall(Long pricingPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pricingPolicies/{pricingPolicyId}"
            .replaceAll("\\{" + "pricingPolicyId" + "\\}", apiClient.escapeString(pricingPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPricingPolicyByIdValidateBeforeCall(Long pricingPolicyId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pricingPolicyId' is set
        if (pricingPolicyId == null) {
            throw new ApiException("Missing the required parameter 'pricingPolicyId' when calling getPricingPolicyById(Async)");
        }
        

        com.squareup.okhttp.Call call = getPricingPolicyByIdCall(pricingPolicyId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Pricing Policy by ID
     * Returns a Pricing Policy by ID
     * @param pricingPolicyId ID of the Pricing Policy to fetch (required)
     * @return PricingPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PricingPolicy getPricingPolicyById(Long pricingPolicyId) throws ApiException {
        ApiResponse<PricingPolicy> resp = getPricingPolicyByIdWithHttpInfo(pricingPolicyId);
        return resp.getData();
    }

    /**
     * Returns a Pricing Policy by ID
     * Returns a Pricing Policy by ID
     * @param pricingPolicyId ID of the Pricing Policy to fetch (required)
     * @return ApiResponse&lt;PricingPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PricingPolicy> getPricingPolicyByIdWithHttpInfo(Long pricingPolicyId) throws ApiException {
        com.squareup.okhttp.Call call = getPricingPolicyByIdValidateBeforeCall(pricingPolicyId, null, null);
        Type localVarReturnType = new TypeToken<PricingPolicy>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Pricing Policy by ID (asynchronously)
     * Returns a Pricing Policy by ID
     * @param pricingPolicyId ID of the Pricing Policy to fetch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPricingPolicyByIdAsync(Long pricingPolicyId, final ApiCallback<PricingPolicy> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPricingPolicyByIdValidateBeforeCall(pricingPolicyId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PricingPolicy>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
